#!/usr/bin/env node

var fs = require('fs');
var program = require('commander');
var through2 = require('through2');
var extend = require('xtend');
var htmlmin = require('html-minifier');

program
    .usage('[options] [file]')
    .option('-o, --output <file>', 'Write output to this file instead of stdout')
    .option('-u, --unsafe', 'Enable unsafe compression options')
    .option('-c, --config <file>', 'json config to extend configuration')
    .parse(process.argv);

var options = {
    removeComments: true,
    removeCommentsFromCDATA: true,
    removeCDATASectionsFromCDATA: true,
    collapseWhitespace: true,
    collapseBooleanAttributes: true,
    removeAttributeQuotes: true,
    removeRedundantAttributes: true,
    useShortDoctype: true,
    removeEmptyAttributes: true,
    removeOptionalTags: true
};
if (program.unsafe) {
    options = extend(options, {
        removeIgnored: true,
        removeEmptyElements: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        caseSensitive: true
    });
}

if (program.config) {
    if (fs.existsSync(program.config)) {
        var file = fs.readFileSync(program.config);
        try {
            var json = JSON.parse(file);
            options = extend(options, json);
        } catch(e) {
            console.error('invalid json in file', program.config, e);
        }
    } else {
        console.error('configuration file not fount at ', program.config);
    }
}

var content = '';
var minify = through2(function (chunk, enc, cb) {
    content += chunk;
    cb();
}, function () {
    content = htmlmin.minify(content, options);
    this.push(content);
});

var src;
if (program.args.length) {
    src = fs.createReadStream(program.args[0], { encoding: 'utf8' });
} else {
    src = process.stdin;
}

var dest;
if (program.output) {
    dest = fs.createWriteStream(program.output);
} else {
    dest = process.stdout;
}

src.pipe(minify).pipe(dest);
